name: Deploy Backend to Azure Container Apps

on:
    workflow_call:
        inputs:
            azure_resource_group:
                description: "Azure Resource Group"
                required: false
                type: string
                default: "iac-infraengine-rg"
            container_registry_name:
                description: "Container Registry Name"
                required: false
                type: string
                default: "iacstudioregistry"
            container_app_name:
                description: "Container App Name"
                required: false
                type: string
                default: "iac-infraengine-backend"
            image_name:
                description: "Docker Image Name"
                required: false
                type: string
                default: "malta-business-indexer-backend"
        outputs:
            backend-url:
                description: "Backend URL"
                value: ${{ jobs.deploy-container-app.outputs.backend-url }}
    workflow_dispatch:
        inputs:
            azure_resource_group:
                description: "Azure Resource Group"
                required: false
                default: "iac-infraengine-rg"
            container_registry_name:
                description: "Container Registry Name"
                required: false
                default: "iacstudioregistry"
            container_app_name:
                description: "Container App Name"
                required: false
                default: "iac-infraengine-backend"
            image_name:
                description: "Docker Image Name"
                required: false
                default: "malta-business-indexer-backend"

env:
    AZURE_RESOURCE_GROUP: ${{ inputs.azure_resource_group || 'iac-infraengine-rg' }}
    AZURE_LOCATION: "East US"
    CONTAINER_REGISTRY_NAME: ${{ inputs.container_registry_name || 'iacstudioregistry' }}
    CONTAINER_APP_NAME: ${{ inputs.container_app_name || 'iac-infraengine-backend' }}
    IMAGE_NAME: ${{ inputs.image_name || 'malta-business-indexer-backend' }}

jobs:
    build-and-push:
        name: Build and Push Container Image
        runs-on: ubuntu-latest
        outputs:
            image-tag: ${{ steps.meta.outputs.tags }}
            image-digest: ${{ steps.build.outputs.digest }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Azure Login
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Get ACR login server
              id: acr-login-server
              run: |
                  ACR_LOGIN_SERVER=$(az acr show --name ${{ env.CONTAINER_REGISTRY_NAME }} --query loginServer --output tsv)
                  echo "login-server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT

            - name: Log in to Azure Container Registry
              uses: azure/docker-login@v1
              with:
                  login-server: ${{ steps.acr-login-server.outputs.login-server }}
                  username: ${{ secrets.REGISTRY_USERNAME }}
                  password: ${{ secrets.REGISTRY_PASSWORD }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ steps.acr-login-server.outputs.login-server }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=sha,prefix={{branch}}-
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Build and push Docker image
              id: build
              uses: docker/build-push-action@v5
              with:
                  context: ./backend
                  file: ./backend/Dockerfile
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    deploy-container-app:
        name: Deploy Container App
        runs-on: ubuntu-latest
        needs: build-and-push
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call'
        outputs:
            backend-url: ${{ steps.get-url.outputs.backend-url }}
        steps:
            - name: Azure Login
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Update Container App
              run: |
                  # Get the full image name with latest tag
                  IMAGE_NAME="${{ env.CONTAINER_REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest"

                  # Update the container app with the new image
                  az containerapp update \
                    --name ${{ env.CONTAINER_APP_NAME }} \
                    --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                    --image $IMAGE_NAME \
                    --set-env-vars PORT=5000 ENVIRONMENT=production MAPS_SERVICE=openstreetmap DEBUG=False

            - name: Get Container App URL
              id: get-url
              run: |
                  # Get the FQDN of the container app
                  FQDN=$(az containerapp show \
                    --name ${{ env.CONTAINER_APP_NAME }} \
                    --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                    --query properties.configuration.ingress.fqdn \
                    --output tsv)

                  BACKEND_URL="https://$FQDN"
                  echo "backend-url=$BACKEND_URL" >> $GITHUB_OUTPUT
                  echo "Backend URL: $BACKEND_URL"

    health-check:
        name: Health Check
        runs-on: ubuntu-latest
        needs: deploy-container-app
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call'
        steps:
            - name: Wait for deployment to be ready
              run: sleep 60

            - name: Health check
              run: |
                  BACKEND_URL="${{ needs.deploy-container-app.outputs.backend-url }}"
                  echo "Checking health at: $BACKEND_URL/health"

                  # Retry health check up to 5 times
                  for i in {1..5}; do
                    if curl -f --connect-timeout 10 --max-time 30 "$BACKEND_URL/health"; then
                      echo "Health check passed!"
                      exit 0
                    else
                      echo "Health check failed, attempt $i/5"
                      sleep 30
                    fi
                  done

                  echo "Health check failed after 5 attempts"
                  exit 1

    notify-success:
        name: Notify Deployment Success
        runs-on: ubuntu-latest
        needs: [health-check, deploy-container-app]
        if: success() && (github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call')
        steps:
            - name: Deployment Success
              run: |
                  echo "ðŸš€ Backend deployment successful!"
                  echo "Backend URL: ${{ needs.deploy-container-app.outputs.backend-url }}"
                  echo "Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
                  echo "Container App: ${{ env.CONTAINER_APP_NAME }}"
